# -*- coding: utf-8 -*-
"""
/***************************************************************************
 OSMandLinker
                                 A QGIS plugin
 Import tracks, AV notes from OSMand
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-04-10
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Sylvain Th√©ry - UMR 5281 ART-Dev
        email                : sylvain.thery@cnrs.fr
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from datetime import datetime

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import QgsMessageLog
# Initialize Qt resources from file resources.py
from .osmand_linker_import import import_gpx_track_file
from .resources import *
# Import the code for the dialog
from .osmand_linker_dialog_avnotes import OSMandLinkerDialogAVnotes
import os.path


class OSMandLinker:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """

        self.plugin_name = 'OsmAnd Linker'
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'osmand_linker_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&OsmAnd Linker')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('OsmAndLinker', message)

    def add_action(
            self,
            icon_path,
            text,
            callback,
            enabled_flag=True,
            add_to_menu=True,
            add_to_toolbar=True,
            status_tip=None,
            whats_this=None,
            parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/osmand_linker/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Import tracks & AV notes from OsmAnd'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&OsmAnd Linker'),
                action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg_avnotes = OSMandLinkerDialogAVnotes()

        # show the dialog
        self.dlg_avnotes.show()
        # Run the dialog event loop
        result = self.dlg_avnotes.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            self.osmand_root_path = self.dlg_avnotes.QgsFW_osmand_root_path.filePath()
            self.dest_path = self.dlg_avnotes.QgsFW_dest_path.filePath()
            self.dest_gpkg = f'{self.dlg_avnotes.QgsFW_dest_path.filePath()}/{datetime.now().strftime("%Y%m%d-%H%M%S")}_OsmAn_Linker.gpkg'
            for currentQTableWidgetItem in self.dlg_avnotes.tW_tracks.selectedItems():
                print(currentQTableWidgetItem.row(), currentQTableWidgetItem.column(), currentQTableWidgetItem.text())
                result = import_gpx_track_file(self, currentQTableWidgetItem.text())
            if self.dlg_avnotes.cB_favourites.isChecked():
                print('self.dlg_avnotes.cB_favorites.checked() checked')
            else:
                print('self.dlg_avnotes.cB_favorites.checked() unchecked')
            if self.dlg_avnotes.cB_itinerary.isChecked():
                print('self.dlg_avnotes.cB_itinerary.checked() checked')
            else:
                print('self.dlg_avnotes.cB_itinerary.checked() unchecked')
            if self.dlg_avnotes.cB_AVnotes.isChecked():
                print('self.dlg_avnotes.cB_AVnotes.checked() checked')
            else:
                print('self.dlg_avnotes.cB_AVnotes.checked() unchecked')

            # rows = {index.row() for index in self.dlg_avnotes.tW_tracks.selectionModel().selectedIndexes()}
            # output = []
            # # taken from
            # # https://stackoverflow.com/questions/67574708/how-to-get-selected-qtableview-row-values-all-column
            # for row in rows:
            #     row_data = []
            #     for column in range(self.dlg_avnotes.tW_tracks.model().columnCount()):
            #         index = self.dlg_avnotes.tW_tracks.model().index(row, column)
            #         row_data.append(index.data())
            #     output.append(row_data)
            # print(output)

            pass
        self.dlg_avnotes.close()
