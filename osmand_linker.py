# -*- coding: utf-8 -*-
"""
/***************************************************************************
 OSMandLinker
                                 A QGIS plugin
 Import tracks, AV notes from OSMand
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-04-10
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Sylvain Th√©ry - UMR 5281 ART-Dev
        email                : sylvain.thery@cnrs.fr
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from datetime import datetime
import os.path

from qgis import processing

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QVariant, Qt
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QProgressBar

from qgis.core import QgsWkbTypes, QgsField,QgsMessageLog, Qgis
from qgis.core import QgsVectorFileWriter, QgsFields, QgsCoordinateReferenceSystem, QgsCoordinateTransformContext

# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the dialog
from .osmand_linker_dialog_avnotes import OSMandLinkerDialogAVnotes

# Import the code for the import
from .osmand_linker_import import import_gpx_track_file

# Pycharm debug server
# To use it, you need to use a 'python remote debug' configuration into pycharm *pro*
# Then 'pip install pydevd-pycharm~=221.5591.52' # at the time of writing (20022-05-27)
try:
    import pydevd_pycharm
    pydevd_pycharm.settrace('localhost', port=53100, stdoutToServer=True, stderrToServer=True)
    print("Debugging into pycharm")
except:
    print("No remote debug configuration")


class OSMandLinker:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """

        self.plugin_name = 'OsmAnd Linker'
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'osmand_linker_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&OsmAnd Linker')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic

    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('OsmAndLinker', message)

    def add_action(
            self,
            icon_path,
            text,
            callback,
            enabled_flag=True,
            add_to_menu=True,
            add_to_toolbar=True,
            status_tip=None,
            whats_this=None,
            parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/osmand_linker/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Import tracks, favourites, itinerary & AV notes'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&OsmAnd Linker'),
                action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg_avnotes = OSMandLinkerDialogAVnotes()

        # show the dialog
        self.dlg_avnotes.show()
        # Run the dialog event loop
        result = self.dlg_avnotes.exec_()
        # See if OK was pressed
        self.dlg_avnotes.close()
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            self.osmand_root_path = self.dlg_avnotes.QgsFW_osmand_root_path.filePath()
            self.dest_path = self.dlg_avnotes.QgsFW_dest_path.filePath()
            self.dest_gpkg = f'{self.dlg_avnotes.QgsFW_dest_path.filePath()}/{datetime.now().strftime("%Y%m%d-%H%M%S")}_OsmAnd_Linker.gpkg'

            # Work around to create GPKG file (with an empty table that will be removed)
            # see https://gis.stackexchange.com/a/417950
            schema = QgsFields()
            schema.append(QgsField("bool_field", QVariant.Bool))
            self.create_blank_gpkg_layer(self.dest_gpkg, "temp_table", QgsWkbTypes.NoGeometry, '', schema)
            if not os.path.exists(os.path.dirname(self.dest_gpkg)):
                message = self.tr(f'Issue when trying to create destination geopackage file ({self.dest_gpkg})')
                QgsMessageLog.logMessage(message, self.plugin_name, level=Qgis.Critical)
                self.iface.messageBar().pushMessage(message, level=Qgis.Critical)
                return

            # Now dealing with selected gpx tracks files
            # We iterate thru selected row(s) of the gpx file table first to count files to import and prepare
            # a message bar
            i = 0
            for currentQTableWidgetItem in self.dlg_avnotes.tW_tracks.selectedItems():
                if currentQTableWidgetItem.column() == 0:
                    i += 1
            progressMessageBar = self.iface.messageBar().createMessage(self.tr("Importing track files..."))
            progress = QProgressBar()
            progress.setMaximum(10)
            progress.setAlignment(Qt.AlignLeft | Qt.AlignVCenter)
            progressMessageBar.layout().addWidget(progress)
            self.iface.messageBar().pushWidget(progressMessageBar, Qgis.Info)

            # We now iterate thru selected row(s) of the gpx file table to import data
            j = 0
            for currentQTableWidgetItem in self.dlg_avnotes.tW_tracks.selectedItems():
                # We just need to get first column value (gpx filename)
                if currentQTableWidgetItem.column() == 0:
                    result = import_gpx_track_file(self,
                                                   f'{self.osmand_root_path}/tracks/rec/{currentQTableWidgetItem.text()}')
                    j += 1
                    progress.setValue(j)
                    if not result:
                        self.iface.messageBar().clearWidgets()
                        message = self.tr(f'Something went wrong while importing {currentQTableWidgetItem.text()}')
                        QgsMessageLog.logMessage(message, self.plugin_name, level=Qgis.Critical)
                        self.iface.messageBar().pushMessage(message, level=Qgis.Critical)
                        return
            self.iface.messageBar().clearWidgets()

            # Now dealing with favourites gpx file
            if self.dlg_avnotes.cB_favourites.isChecked():
                # user and log info
                file = 'favourites.gpx'
                message = self.tr(f"Importing favourites ({file})")
                self.iface.messageBar().pushMessage(message, level=Qgis.Info)
                QgsMessageLog.logMessage(message, self.plugin_name, level=Qgis.Info)
                # Process and test result
                result = import_gpx_track_file(self, f'{self.osmand_root_path}/{file}')
                if not result:
                    self.iface.messageBar().clearWidgets()
                    message = self.tr(f'Something went wrong while importing favourites ({file})')
                    QgsMessageLog.logMessage(message, self.plugin_name, level=Qgis.Critical)
                    self.iface.messageBar().pushMessage(message, level=Qgis.Critical)
                    return
            self.iface.messageBar().clearWidgets()

            # Now dealing with itinerary gpx file
            if self.dlg_avnotes.cB_itinerary.isChecked():
                # user and log info
                file = 'itinerary.gpx'
                message = self.tr(f"Importing itinerary ({file})")
                self.iface.messageBar().pushMessage(message, level=Qgis.Info)
                QgsMessageLog.logMessage(message, self.plugin_name, level=Qgis.Info)
                # Process and test result
                result = import_gpx_track_file(self, f'{self.osmand_root_path}/{file}')
                if not result:
                    self.iface.messageBar().clearWidgets()
                    message = self.tr(f'Something went wrong while importing itinerary ({file})')
                    QgsMessageLog.logMessage(message, self.plugin_name, level=Qgis.Critical)
                    self.iface.messageBar().pushMessage(message, level=Qgis.Critical)
                    return
            self.iface.messageBar().clearWidgets()

            # if self.dlg_avnotes.cB_AVnotes.isChecked():
            #     print('self.dlg_avnotes.cB_AVnotes.checked() checked')

        # if present, remove the temp_layer previously created to generete destination gpkg
        try:
            processing.run("native:spatialiteexecutesql",
                           {'DATABASE': f'{self.dest_gpkg}|layername=temp_table', 'SQL': 'drop table temp_table'})
        except Exception as e:
            pass

        # Show success message when finished
        self.iface.messageBar().clearWidgets()
        message = self.tr("‚ô™‚ô™ This is the End, my only friend, the End ‚ô™‚ô™")
        QgsMessageLog.logMessage(message, self.plugin_name, level=Qgis.Success)
        self.iface.messageBar().pushMessage(message, level=Qgis.Success, duration=0)

    def create_blank_gpkg_layer(self, gpkg_path: str, layer_name: str, geometry: int,
                                crs: str, schema: QgsFields, append: bool = False
                                ) -> None:
        """
        Create a blank layer into a gpkg file. The gpkg is created if needed, and can be overwritten if it already exists
        Taken from :
        https://gis.stackexchange.com/questions/417916/creating-empty-layers-in-a-geopackage-using-pyqgis
        Thanks to Germ√°n Carrillo https://gis.stackexchange.com/users/4972/germ%c3%a1n-carrillo
        :param gpkg_path: geopackage file
        :type gpkg_path: str
        :param layer_name: layer to be created
        :type layer_name: str
        :param geometry: Geometry Type. Can be none.
        :type geometry: QgsWkbType
        :param crs: CRS of the geometry. Can be empty
        :type crs: str
        :param schema: Attribute table structure
        :type schema: QgsFields()
        :param append: What to do when gpkg file exists (create or overwrite layer)
        :type append: bool
        :return: None
        :rtype: None
        """
        options = QgsVectorFileWriter.SaveVectorOptions()
        options.driverName = "GPKG"
        options.layerName = layer_name
        if append:
            options.actionOnExistingFile = QgsVectorFileWriter.CreateOrOverwriteLayer

        writer = QgsVectorFileWriter.create(
            gpkg_path,
            schema,
            geometry,
            QgsCoordinateReferenceSystem(crs),
            QgsCoordinateTransformContext(),
            options)
        del writer
