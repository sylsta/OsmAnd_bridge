# -*- coding: utf-8 -*-
"""
/***************************************************************************
 OSMandLinkerDialog
                                 A QGIS plugin
 Import tracks, AV notes from OSMand
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2022-04-10
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Sylvain ThÃ©ry - UMR 5281 ART-Dev
        email                : sylvain.thery@cnrs.fr
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from qgis.core import QgsVectorLayer, QgsProject, QgsVectorFileWriter
import pathlib

def import_gpx_track_file(self, filename):
    """

    :param self:
    :type self:
    :param source:
    :type source:
    :return:
    :rtype:
    """

    prefix = pathlib.Path(filename).stem
    names = ["waypoints", "routes", "tracks", "route_points", "track_points"]

    for name in names:
        # prepare gpx layer
        uri = f"{filename}|layername={name}"
        sublayer = QgsVectorLayer(uri, name, 'ogr')
        if sublayer.featureCount() > 0:
            # load gpx layer
            QgsProject.instance().addMapLayer(sublayer)
            # set options to export it to gpkg
            options = QgsVectorFileWriter.SaveVectorOptions()
            options.layerName = f"{prefix}_{sublayer.name()}"
            options.actionOnExistingFile = QgsVectorFileWriter.CreateOrOverwriteLayer
            context = QgsProject.instance().transformContext()
            # do export
            QgsVectorFileWriter.writeAsVectorFormatV2(sublayer, self.dest_gpkg, context, options)
            # remove source layer
            QgsProject.instance().removeMapLayer(sublayer)
            # load new gpkg layer
            uri = f"{self.dest_gpkg}|layername={options.layerName}"
            sublayer = QgsVectorLayer(uri, options.layerName, 'ogr')
            QgsProject.instance().addMapLayer(sublayer)



