# -*- coding: utf-8 -*-
"""
/***************************************************************************
 OsmAnd bridge
                                 A QGIS plugin
 Import tracks, favorites, itinerary and AV notes from OsmAnd
 Generated by Plugin Builder: https://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2022-04-10
        git sha              : $Format:%H$
        copyright            : (C) 2022-2025 by Sylvain Th√©ry - UMR 5281 ART-Dev
        email                : sylvain.thery@cnrs.fr
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import datetime as dt
import platform
import subprocess
import tempfile
import glob

from qgis.PyQt.QtGui import QGuiApplication
from qgis.PyQt.QtWidgets import QTableWidgetItem, QDialogButtonBox, QTableWidget, QCheckBox, QLabel, QPushButton, \
    QRadioButton, QComboBox, QMessageBox
from qgis.PyQt import uic, QtWidgets

from qgis.PyQt.QtCore import Qt
from qgis.utils import iface
from qgis.gui import QgsFileWidget
from qgis.core import QgsMessageLog, Qgis, QgsApplication, QgsProject

from .OsmAnd_bridge_settings_management import msgbox_setting, load_settings, save_settings

# Import MTP librairies depending on OS
if platform.system() == 'Linux':
    from .extra_packages.mtpy.mtpy import get_raw_devices, common_retrieve_to_folder
elif platform.system() == 'Windows':
    try:
        import comtypes
        from .extra_packages.mtp.win_access import get_portable_devices, walk
    except:
        # Crashes if comtypes is not installed. We will deal with this below
        pass

# Loads .ui
try:  # Qt5
    FORM_CLASS, _ = uic.loadUiType(os.path.join(
        os.path.dirname(__file__), 'OsmAnd_bridge_import_dialog.ui'), resource_suffix='')
except:  # Qt6
    FORM_CLASS, _ = uic.loadUiType(os.path.join(
        os.path.dirname(__file__), 'OsmAnd_bridge_import_dialog.ui'))


class OsmAndBridgeImportDialog(QtWidgets.QDialog, FORM_CLASS):
    """
    Class to manage import settings from OsmAnd directory or MTP device
    """
    # annotations for completion in code editor
    buttonBox: QDialogButtonBox
    tW_tracks: QTableWidget
    QgsFW_osmand_root_path: QgsFileWidget
    QgsFW_dest_path: QgsFileWidget
    cB_favorites: QCheckBox
    cB_itinerary: QCheckBox
    cB_AVnotes: QCheckBox
    label: QLabel
    label_2: QLabel
    label_3: QLabel
    label_4: QLabel
    label_6: QLabel
    clearPB: QPushButton
    selectAllTracksPB: QPushButton
    rBdevice: QRadioButton
    rBdir: QRadioButton
    cBdeviceList: QComboBox
    qbRefresh: QPushButton
    qbGoMTP: QPushButton

    def __init__(self, parent=None):
        """
        Constructor
        :param parent: None
        :type parent: None
        """
        super(OsmAndBridgeImportDialog, self).__init__(parent)
        self.setupUi(self)

        self.plugin_name = 'OsmAnd bridge'

        # Manage table view of tracks
        self.tW_tracks.setColumnCount(3)
        columns = [self.tr("Name"), self.tr("Size"), self.tr("Last Modified")]
        self.tW_tracks.setHorizontalHeaderLabels(columns)
        self.tW_tracks.setSortingEnabled(True)
        self.tW_tracks.setRowCount(0)
        try:  # pyQt5
            self.tW_tracks.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
        except:  # PyQt6
            self.tW_tracks.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.SizeAdjustPolicy.AdjustToContents)
        self.tW_tracks.selectionModel().selectionChanged.connect(self.enable_ok_button)

        # input and output path
        self.QgsFW_osmand_root_path.setStorageMode(QgsFileWidget.StorageMode.GetDirectory)
        self.QgsFW_osmand_root_path.fileChanged.connect(self.osmand_root_path_changed)
        self.QgsFW_dest_path.setStorageMode(QgsFileWidget.StorageMode.GetDirectory)
        self.QgsFW_dest_path.fileChanged.connect(self.destination_changed)

        # Combobox management
        for cBB in [self.cB_favorites, self.cB_itinerary, self.cB_AVnotes]:
            cBB.setEnabled(False)
            cBB.setChecked(False)
            cBB.stateChanged.connect(self.enable_ok_button)

        try:  # Qt5
            self.buttonBox.button(QtWidgets.QDialogButtonBox.Ok).setEnabled(False)
        except:  # Qt6
            self.buttonBox.button(QtWidgets.QDialogButtonBox.StandardButton.Ok).setEnabled(False)

        # clear tracks selection button
        try:  # Qt5
            icon = self.style().standardIcon(QtWidgets.QStyle.SP_DialogCloseButton)
        except:  # Qt6
            icon = self.style().standardIcon(QtWidgets.QStyle.StandardPixmap.SP_DialogCloseButton)
        self.clearPB.setIcon(icon)
        self.clearPB.setEnabled(False)
        self.clearPB.clicked.connect(self.clear_tracks_selection)

        # Select all tracks button
        try:  # Qt5
            icon = self.style().standardIcon(QtWidgets.QStyle.SP_DialogYesButton)
        except:  # Qt6
            icon = self.style().standardIcon(QtWidgets.QStyle.StandardPixmap.SP_DialogYesButton)
        self.selectAllTracksPB.setIcon(icon)
        self.selectAllTracksPB.setEnabled(False)
        self.selectAllTracksPB.clicked.connect(self.select_all_tracks)

        # radio buttons to switch between device and directory
        self.rBdir.toggled.connect(self.on_radio_button_toggled)
        self.rBdevice.toggled.connect(self.on_radio_button_toggled)
        self.cBdeviceList.hide()
        self.QgsFW_osmand_root_path.hide()
        self.label.hide()
        self.qbRefresh.hide()
        self.qbRefresh.clicked.connect(self.list_MTP_Devices)
        self.qbGoMTP.hide()
        self.qbGoMTP.clicked.connect(self.search_copy_osmand_file_from_device)
        self.qbGoMTP.setEnabled(False)
        try:  # Qt5
            icon = self.style().standardIcon(QtWidgets.QStyle.SP_BrowserReload)
        except:  # Qt6
            icon = self.style().standardIcon(QtWidgets.QStyle.StandardPixmap.SP_BrowserReload)
        self.qbRefresh.setIcon(icon)
        try:  # Qt5
            icon = self.style().standardIcon(QtWidgets.QStyle.SP_DialogOkButton)
        except:  # Qt6
            icon = self.style().standardIcon(QtWidgets.QStyle.StandardPixmap.SP_DialogOkButton)
        self.qbGoMTP.setIcon(icon)

        # Params file for messageboxes
        self.PARAM_FILE = f"{os.path.dirname(__file__)}/settings.json"

        # strings that will be used later
        self.title_cant_connect = self.tr("Can't connect to device...")
        self.message_cant_connect = self.tr(
            "Check that it is properly connected and unlocked.\n Try unplugging "
            "and replugging it.")
        self.title_no_device_found = self.tr('No device found!')
        self.message_no_device_found = self.tr("Check that your device is properly connected and unlocked.\n"
                                               "You can press left button to refresh devices list or to restart QGIS.")
        # If windows, comtypes python package needs to be installed
        if platform.system() == 'Windows':
            # by default MTP connection is disabled
            # self.rBdir.setChecked(True)
            self.rBdevice.setEnabled(False)

            try:
                # This import is done there just to test if comtypes is present
                import comtypes.client
                self.rBdevice.setEnabled(True)
                # self.rBdevice.setChecked(True)

            except:
                QgsMessageLog.logMessage("Failed to import Comtypes", self.plugin_name,
                                         level=Qgis.Warning)

                # Check for a previous attempt to install Comtypes


                # Srings to messageboxes that could be used 4x later
                title_comtypes_failed = self.tr("Previous installation attempt failed...")
                message_comtypes_failed = self.tr("Manually install comtypes package to download OsmAnd data " \
                                  "directly from your device.")
                # Strings to messageboxes that could be used 2x later
                title_comtypes = self.tr("Python package COMTYPES not found")
                message_comtypes = self.tr("This plugins needs a package that is not in the " \
                                           "standard library. \nDo you want to try to install " \
                                           "COMTYPES automatically?")



                settings = load_settings(self.PARAM_FILE)
                setting_name = 'comptypes_install_tried'
                if not settings.get(setting_name, False):
                    try:
                        # trying to install comtypes
                        answer = msgbox_setting(self, setting_name, title_comtypes, message_comtypes, yes_no=True )
                        if answer:
                            # set that an installation has been  tried
                            # settings[setting_name] = True
                            # save_settings(self.PARAM_FILE, settings)

                            #tries to install requirements
                            from .extra_packages.eqip.configuration.piper import install_requirements_from_file
                            install_requirements_from_file(os.path.join(os.path.dirname(__file__), "requirements.txt"))

                            title_restart = self.tr("An attempt to install comptypes was made")
                            message_restart = self.tr(
                                "QGIS has to be restarted. Do you want to do it now "
                                "(and be asked to save your project if needed)?")
                            setting_name = "qgis_restarted"
                            answer_reboot = msgbox_setting(self, setting_name, title_restart, message_restart, yes_no=True)
                            if answer_reboot:
                                if QgsProject.instance().isDirty():
                                    iface.actionSaveProject().trigger()
                                iface.actionExit().trigger()
                                subprocess.Popen(QgsApplication.applicationFilePath())


                    except:
                        QMessageBox.critical(None, title_comtypes_failed, message_comtypes_failed)
                        QgsMessageLog.logMessage(f"{title_comtypes_failed}. {message_comtypes_failed}",
                                                 self.plugin_name, level=Qgis.Critical)

                else:
                    QMessageBox.critical(None, title_comtypes_failed, message_comtypes_failed)
                    QgsMessageLog.logMessage(f"{title_comtypes_failed}. {message_comtypes_failed}", self.plugin_name, level=Qgis.Critical)

        # Macintosh stuff
        self.APP_NAME = "MacDroid"
        self.APP_PATH = f"/Applications/{self.APP_NAME}.app"



    def list_MTP_Devices(self):
        """
        List TMP devices connected to system to feed interface listbox
        :return:
        """

        # Clear stuff on UI
        self.clear_UI_items()
        self.qbGoMTP.setEnabled(False)

        if platform.system() == 'Linux':
            # koi or gvfs might block access to devices
            self.kill_pid()
            try:
                # get list of mtp devices
                devices = get_raw_devices()
            except:
                # No device found
                QMessageBox.warning(self, self.title_no_device_found, self.message_no_device_found)
                return

            # iterates through list of devices to get there name and model and feed comboboxlist
            for device in devices:
                try:
                    self.kill_pid()  # if devices are busy because of the desktop framework
                    device_open = device.open()
                    device_model_name = str(device_open.get_model_name())
                    self.cBdeviceList.addItem(f'{device_model_name} - {str(device_open)[9:-2]}')
                    device_open.close()
                except:
                    # Can't connect to  device
                    QgsMessageLog.logMessage(f"{self.title_cant_connect} {self.message_cant_connect}", self.plugin_name,
                                             level=Qgis.Critical)
                    QMessageBox.warning(self, self.title_cant_connect, self.message_cant_connect)

            if self.cBdeviceList.count() > 0:
                # enable browsing button if one or more device found
                self.qbGoMTP.setEnabled(True)
            else:
                QMessageBox.warning(self, self.title_no_device_found, self.message_no_device_found)

        elif platform.system() == 'Windows':
            try:
                # get list of mtp devices
                devices = get_portable_devices()
            except:
                # No device found
                QMessageBox.warning(self, self.title_no_device_found, self.message_no_device_found)
                return

            for device in devices:
                # iterates through list of devices to get there name and model and feed comboboxlist
                try:
                    self.cBdeviceList.addItem(f"{device.get_description()[0]} - {device.get_description()[1]}")
                except:
                    # Can't connect to  device
                    QgsMessageLog.logMessage(f"{self.title_cant_connect} {self.message_cant_connect}",
                                             self.plugin_name, level=Qgis.Critical)
                    QMessageBox.critical(self, self.title_cant_connect, self.message_cant_connect)

            if self.cBdeviceList.count() > 0:
                # enable browsing button if one or more device found
                self.qbGoMTP.setEnabled(True)
            else:
                QMessageBox.warning(self, self.title_no_device_found, self.message_no_device_found)


        elif platform.system() == 'Darwin':
            # Since we need macdroid, we'll gonna check if it is installed and running
            # if not we will proceed to install and/or launch
            if self.is_macdroid_installed():
                if not self.is_macdroid_running():
                    self.launch_macdroid()

                path = os.path.join(os.path.expanduser("~"), ".AFTVolumes")

                try:
                    for subdir in os.listdir(path):
                        if os.path.isdir(os.path.join(path, subdir)):
                            self.cBdeviceList.addItem(subdir)
                except:
                    pass
                if self.cBdeviceList.count() > 0:
                    # enable browsing button if one or more device found
                    self.qbGoMTP.setEnabled(True)
                else:
                    QMessageBox.warning(self, self.title_no_device_found, self.message_no_device_found)

            else:
                self.rBdir.setChecked(True)
                self.rBdevice.setEnabled(False)
                self.on_radio_button_toggled()
                title = self.tr("Warning")
                message = self.tr(
                    "This plugin needs MacDroid (even Free version) to access MTP Device. Please consider installing it."
                    "See <a href='https://www.macdroid.app/fr/downloads/'>https://www.macdroid.app/fr/downloads</a>")
                QMessageBox.warning(None, title, message)
        else:
            pass

    def is_macdroid_installed(self):
        """
        Check for macDroid app
        :return: boolean
        """
        return os.path.exists(self.APP_PATH)

    def is_macdroid_running(self):
        """
        Check if MacDroid is running
        :return: boolean
        """
        try:
            result = subprocess.run(
                ["pgrep", "-fx", f"/Applications/{self.APP_NAME}.app/Contents/MacOS/{self.APP_NAME}"],
                capture_output=True,
                text=True
            )
            return result.returncode == 0
        except Exception as e:
            QgsMessageLog.logMessage(f"Issue when trying to see if macDroid is launched {e}", self.plugin_name, level=Qgis.Critical)
            return False

    def launch_macdroid(self):
        """
        Launch MacDroid
        :return:
        """
        try:
            subprocess.run(["open", "-a", self.APP_NAME], check=True)
        except subprocess.CalledProcessError:
            QgsMessageLog.logMessage("Failed to launch macDroid", self.plugin_name,
                                     level=Qgis.Critical)

    def search_copy_osmand_file_from_device(self):
        """
        Search OSMand file from device and copy them to tmp directory (Linux & Windows)
        (for Macintosh :+}, no need to copy files since they are seens as a real filesystem)
        Feed QgsFW_osmand_root_path widget with this directory
        :return:
        """
        setting_name = "hide_duration_message"
        title = self.tr("Warning")
        mtpy_msg = ''
        if platform.system() == 'Linux':
            mtpy_msg = self.tr(", especially under GNU/Linux :(")

        message = self.tr(f"Be patient! \nThis operation can take several minutes{mtpy_msg}.\nIn rare cases, "
                          f"it can cause Qgis to crash.")
        msgbox_setting(self, setting_name, title, message)

        # https://gis.stackexchange.com/questions/42542/changing-cursor-shape-in-pyqgis
        try:
            # PyQt6
            QGuiApplication.setOverrideCursor(Qt.CursorShape.WaitCursor)
        except AttributeError:
            # PyQt5
            QGuiApplication.setOverrideCursor(Qt.WaitCursor)

        # create temp folder for the downloaded data to be stored
        items_list = ['/avnotes/', '/tracks/rec/', '/favorites/', '/itinerary.gpx']
        potential_paths = ['/Android/data/net.osmand/files', '/Android/data/net.osmand.plus/files',
                           '/Android/media/net.osmand/files', '/Android/media/net.osmand.plus/files',
                           '/Android/obb/net.osmand/files', '/Android/obb/net.osmand.plus/files',
                           ]

        if platform.system() != "Darwin":  # no need for Darwin since macDroid does a real mount of the device as an FS
            tmp_dir_name = tempfile.TemporaryDirectory().name
            os.makedirs(tmp_dir_name + items_list[0])
            os.makedirs(tmp_dir_name + items_list[1])
            os.makedirs(tmp_dir_name + items_list[2])

        if platform.system() == 'Linux':
            self.kill_pid()
            try:
                devices = get_raw_devices()
            except:
                QMessageBox.warning(self, self.title_no_device_found, self.message_no_device_found)
                QGuiApplication.restoreOverrideCursor()
                return

            try:
                for device in devices:
                    # Iterates throught device to select th right one
                    self.kill_pid()
                    device_open = device.open()
                    device_model_name = str(device_open.get_model_name())

                    if self.cBdeviceList.currentText() == (f'{device_model_name} - {str(device_open)[9:-2]}'):
                        # We use the right device
                        path_found = False
                        first = True
                        for path in potential_paths:
                            # look for OsmAnd path
                            if first:
                                first = False
                            if device_open.get_descendant_by_path(path) is not None:
                                path_found = True
                                break


                        if not path_found:
                            QGuiApplication.restoreOverrideCursor()
                            msg = QMessageBox()
                            msg.setWindowTitle(self.tr("No files found"))
                            msg.setText(
                                self.tr(f"OsmAnd files could not be found on {device_model_name}. Try copying the "
                                        "files to your hard disk and importing them into QGIS from the "
                                        "local directory."))
                            try:
                                # Qt6
                                msg.setIcon(QMessageBox.Icon.Warning)
                                msg.setStandardButtons(QMessageBox.StandardButton.Ok)
                            except:
                                # Qt5
                                msg.setIcon(QMessageBox.Information)
                                msg.setStandardButtons(QMessageBox.Ok)
                            msg.exec()
                            return

                        # copy data to tmp folder
                        for item in items_list:
                            try:
                                # copy item to tmp dir
                                self.kill_pid()
                                item_content = device_open.get_descendant_by_path(path + item)
                                if item_content is not None:
                                    self.kill_pid()
                                    if item == '/itinerary.gpx':  # since it's a file not a dir
                                        item_content.retrieve_to_file(tmp_dir_name)
                                    else:
                                        common_retrieve_to_folder(item_content, tmp_dir_name + item)
                            except:
                                pass

                    device_open.close()
            except:
                QMessageBox.warning(self, self.title_cant_connect, self.message_cant_connect)
                QGuiApplication.restoreOverrideCursor()
                return
        elif platform.system() == 'Windows':
            try:
                devices = get_portable_devices()
            except:
                QMessageBox.warning(self, self.title_cant_connect, self.message_cant_connect)
                QGuiApplication.restoreOverrideCursor()
                return
            if len(devices) == 0:
                QMessageBox.warning(self, self.title_no_device_found, self.message_no_device_found)
                QGuiApplication.restoreOverrideCursor()

            try:
                for device in devices:
                    device_model_name, device_desc = device.get_description()
                    selected_device = device
                    cont = device.get_content()
                    found = False
                    if self.cBdeviceList.currentText() == (f'{device_model_name} - {device_desc}'):
                        root_path = None
                        for root, dirs, files in walk(device, device_model_name):
                            if (len(dirs)) > 0:
                                root_path = dirs[0].name
                                break

                        if root_path is not None:
                            for path in potential_paths:
                                for root, dirs, files in walk(device, device_desc + '\\' + root_path + path):
                                    if (len(dirs)) > 0:
                                        found = True
                                        break
                                if found:
                                    break

                        if not found:
                            QGuiApplication.restoreOverrideCursor()
                            msg = QMessageBox()
                            msg.setWindowTitle(self.tr("No files found"))
                            msg.setText(
                                self.tr(f"OsmAnd files could not be found on {device_model_name}. Try copying the "
                                        "files to your hard disk and importing them into QGIS from the "
                                        "local directory."))
                            try:
                                # Qt6
                                msg.setIcon(QMessageBox.Icon.Warning)
                                msg.setStandardButtons(QMessageBox.StandardButton.Ok)
                            except:
                                # Qt5
                                msg.setIcon(QMessageBox.Warning)
                                msg.setStandardButtons(QMessageBox.Ok)
                            msg.exec()
                            return

                cont = selected_device.get_content()
                for item in items_list:
                    if item == '/itinerary.gpx':

                        file_name = f"{root_path}{path}/itinerary.gpx".replace('/', os.sep)
                        content = cont[0].get_path(file_name)
                        content.download_file(f"{tmp_dir_name}\\itinerary.gpx")
                    else:
                        item = item.replace('/', os.sep)
                        item_path = f"{device_model_name}/{root_path}{path}{item[:-1]}".replace('/', os.sep)
                        for root, dirs, files in walk(device, item_path):
                            for file in files:
                                file.download_file(f"{tmp_dir_name}{item}{file.name}")

            except:
                QGuiApplication.restoreOverrideCursor()
                QMessageBox.warning(self, self.title_cant_connect, self.message_cant_connect)
                return

        elif platform.system() == 'Darwin':
            root_path = os.path.join(os.path.expanduser("~"), ".AFTVolumes", self.cBdeviceList.currentText())
            found = False
            for root, subdir, _ in os.walk(root_path):
                for dirname in subdir:
                    if dirname.startswith("net.osmand"):
                        tmp_dir_name = os.path.join(root, dirname)
                        found = True
                        break
                if found:
                    tmp_dir_name = tmp_dir_name + '/files/'
                    break

            if not found:
                QGuiApplication.restoreOverrideCursor()
                msg = QMessageBox()
                msg.setWindowTitle(self.tr("No files found"))
                msg.setText(
                    self.tr(f"OsmAnd files could not be found on {self.cBdeviceList.currentText()}. Try copying the "
                            "files to your hard disk and importing them into QGIS from the "
                            "local directory."))
                try:
                    # Qt6
                    msg.setIcon(QMessageBox.Icon.Warning)
                    msg.setStandardButtons(QMessageBox.StandardButton.Ok)
                except:
                    # Qt5
                    msg.setIcon(QMessageBox.Warning)
                    msg.setStandardButtons(QMessageBox.Ok)
                msg.exec()
                return

        self.QgsFW_osmand_root_path.setFilePath(tmp_dir_name)
        QGuiApplication.restoreOverrideCursor()

    def on_radio_button_toggled(self):
        self.label.show()
        self.clear_UI_items()
        if self.rBdir.isChecked():
            self.QgsFW_osmand_root_path.setFilePath('')
            self.QgsFW_osmand_root_path.show()
            self.cBdeviceList.hide()
            self.qbRefresh.hide()
            self.qbGoMTP.hide()
            self.label.setText(self.tr('<html><head/><body><p><span style=" font-weight:600;">Select the OSMand'
                                       ' \'file\' directory on you computer:</span></p></body></html>'))

        elif self.rBdevice.isChecked():
            self.QgsFW_osmand_root_path.hide()
            self.QgsFW_osmand_root_path.setFilePath('')
            self.cBdeviceList.show()
            self.qbRefresh.show()
            self.qbGoMTP.show()
            self.label.setText(self.tr(
                "<html><head/><body><p><span style=\" font-weight:600;\">"
                "Select your device and press the right button to search for OsmAnd files.<br>"
                "You can use the left button to refresh devices list."
                "</span></p></body></html>"))
            self.list_MTP_Devices()

    def clear_UI_items(self):
        """
        Clear UI items.
        """
        self.cBdeviceList.clear()
        self.tW_tracks.clearContents()
        self.tW_tracks.setRowCount(0)
        self.QgsFW_osmand_root_path.setFilePath('')
        for item in [self.cB_itinerary, self.cB_favorites, self.cB_AVnotes]:
            item.setEnabled(False)
            item.setChecked(False)

    def kill_pid(self):
        """
        Find and kill process by its PID.
        see https://bugs.kde.org/show_bug.cgi?id=412257
        Since kiod 5 doesn't release usb device when it is not in use, we kill kio* processes.
        Seems to be the same under gnome so that's why we kill all gfvs processes.
        :return: nothing
        """
        try:
            for desktop in ['kio', 'gvfs']:
                pid = os.popen(f"pgrep -f '{desktop}'").read()
                os.system("kill -9 " + pid)

        except:
            pass

    def clear_tracks_selection(self) -> None:
        """
        Unselect all tracks in the table widget
        :return:
        """
        self.tW_tracks.clearSelection()
        self.enable_ok_button()

    def select_all_tracks(self):
        """
        Select all tracks in th table widget
        :return:
        """
        self.tW_tracks.selectAll()
        self.enable_ok_button()

    def destination_changed(self):
        """
        Called when destination text area content change
        :return: None
        :rtype: None
        """

        if not os.path.exists(os.path.dirname(self.QgsFW_dest_path.filePath())):
            QgsMessageLog.logMessage(self.tr('Not a valid output file path.'), self.plugin_name, level=Qgis.Critical)
        self.enable_ok_button()

    def osmand_root_path_changed(self) -> None:
        """
        Called when source text area content changes
        :return: None
        :rtype: None
        """
        self.tW_tracks.clearContents()
        self.tW_tracks.setRowCount(0)
        self.clearPB.setEnabled(False)
        self.selectAllTracksPB.setEnabled(False)

        if not os.path.isdir(self.QgsFW_osmand_root_path.filePath()):
            QgsMessageLog.logMessage(self.tr('Not a valid directory.'), self.plugin_name, level=Qgis.Critical)
            # self.init_widget()
        else:
            # tracks table
            try:
                if not os.path.isdir(f'{self.QgsFW_osmand_root_path.filePath()}/tracks/rec/'):
                    QgsMessageLog.logMessage(self.tr('No valid OsmAnd tracks path.'), self.plugin_name,
                                             level=Qgis.Critical)

                else:
                    pattern = f'{self.QgsFW_osmand_root_path.filePath()}/tracks/rec/*.gpx'
                    if len(glob.glob(pattern)) >= 0:
                        self.get_gpx_file_information(pattern)
                        self.tW_tracks.setEnabled(True)
                        self.tW_tracks.resizeColumnsToContents()
                        self.clearPB.setEnabled(True)
                        self.selectAllTracksPB.setEnabled(True)
                        self.select_all_tracks()
                        QgsMessageLog.logMessage(self.tr('Found gpx file(s) to import.'), self.plugin_name,
                                                 level=Qgis.Info)

            except:
                QgsMessageLog.logMessage(self.tr('No gpx file to import.'), self.plugin_name, level=Qgis.Warning)

            # checkbox favorites
            try:
                with open(f'{self.QgsFW_osmand_root_path.filePath()}/favorites/favorites.gpx'):
                    QgsMessageLog.logMessage(self.tr('Found favorites.gpx.'), self.plugin_name, level=Qgis.Info)
                    self.cB_favorites.setEnabled(True)
                    self.cB_favorites.setChecked(True)

            except IOError:
                QgsMessageLog.logMessage(self.tr('No favorites found.'), self.plugin_name, level=Qgis.Warning)
                self.cB_favorites.setEnabled(False)
                self.cB_favorites.setChecked(False)

            # checkbox itinerary
            try:
                with open(f'{self.QgsFW_osmand_root_path.filePath()}/itinerary.gpx'):
                    QgsMessageLog.logMessage(self.tr('Found ./itinerary.gpx.'), self.plugin_name, level=Qgis.Info)
                    self.cB_itinerary.setEnabled(True)
                    self.cB_itinerary.setChecked(True)

            except IOError:
                QgsMessageLog.logMessage(self.tr('./itinerary.gpx not found.'), self.plugin_name, level=Qgis.Warning)
                self.cB_itinerary.setEnabled(False)
                self.cB_itinerary.setChecked(False)

            # checkbox AVnotes
            try:
                if not os.path.isdir(f'{self.QgsFW_osmand_root_path.filePath()}/avnotes/'):
                    QgsMessageLog.logMessage(self.tr('No valid OsmAnd avnotes path.'), self.plugin_name,
                                             level=Qgis.Critical)
                    self.cB_AVnotes.setEnabled(False)
                    self.cB_AVnotes.setChecked(False)
                else:
                    if len(glob.glob(f'{self.QgsFW_osmand_root_path.filePath()}/avnotes/*.3gp)')) + \
                            len(glob.glob(f'{self.QgsFW_osmand_root_path.filePath()}/avnotes/*.jpg')) + \
                            len(glob.glob(f'{self.QgsFW_osmand_root_path.filePath()}/avnotes/*.mp4')) > 0:
                        self.cB_AVnotes.setEnabled(True)
                        self.cB_AVnotes.setChecked(True)
                        QgsMessageLog.logMessage(self.tr('Found OsmAnd AV note(s) to import.'), self.plugin_name,
                                                 level=Qgis.Info)

            except:
                QgsMessageLog.logMessage(self.tr('No AV note file(s) to import.'), self.plugin_name, level=Qgis.Warning)

        self.enable_ok_button()

    def get_gpx_file_information(self, pattern: str) -> None:
        """
        List files according to pattern and send info the function that feed dialog table
        :param pattern: a file pattern whit directory (e.g. '/home/sylvain/test/*.gpx)
        :type pattern: string
        :return: None
        :rtype: None
        """
        # listFiles = os.listdir(path)
        for f in glob.glob(pattern):
            p = os.path.join(pattern, f)
            st = os.stat(p)
            # to do convert list into individual items
            self.add_gpx_file_table_row([os.path.basename(f), self.human_readable_filesize(os.path.getsize(p)),
                                         str(dt.datetime.fromtimestamp(st.st_mtime))])

    def add_gpx_file_table_row(self, row_data) -> None:
        """
        Add files details to the dialog's table widget
        :param row_data: list of gpx file details
        :type row_data: list of strings
        :return: None
        :rtype: None
        """
        row = self.tW_tracks.rowCount()
        self.tW_tracks.setRowCount(row + 1)
        col = 0
        for item in row_data:
            cell = QTableWidgetItem(str(item))
            self.tW_tracks.setItem(row, col, cell)
            col += 1

    def human_readable_filesize(self, bytes: int, units=[' bytes', ' KB', ' MB', ' GB', ' TB', ' PB', ' EB']) -> str:
        """
        Return a human-readable string representation of bytes based on a recursive call of itself
        Taken from https://stackoverflow.com/questions/1094841/get-human-readable-version-of-file-size/43750422
        :param bytes: size of a file in bytes
        :type bytes: int
        :param units: human-readable file size units
        :type units: list of string
        :return: return a human-readable string representation of bytes
        :rtype: str
        """
        return str(bytes) + units[0] if bytes < 1024 else self.human_readable_filesize(bytes >> 10, units[1:])

    def enable_ok_button(self):
        """
        Manage OK button. Make it only enable when all the params are OK.
        :return: None
        :rtype: None
        """
        flag = False
        try:

            if os.path.isdir(os.path.dirname(self.QgsFW_osmand_root_path.filePath())):
                if os.path.isdir(self.QgsFW_dest_path.filePath()):
                    if self.cB_AVnotes.isChecked() or self.cB_favorites.isChecked() or self.cB_itinerary.isChecked() \
                            or len(set(index.row() for index in self.tW_tracks.selectedIndexes())) > 0:
                        flag = True

        except:
            pass

        try:  # Qt5
            self.buttonBox.button(QtWidgets.QDialogButtonBox.Ok).setEnabled(flag)
        except:  # Qt6
            self.buttonBox.button(QtWidgets.QDialogButtonBox.StandardButton.Ok).setEnabled(flag)
