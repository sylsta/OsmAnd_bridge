# -*- coding: utf-8 -*-
"""
/***************************************************************************
 OsmAnd bridge
                                 A QGIS plugin
 Import tracks, favorites, itinerary and AV notes from OsmAnd
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2022-04-10
        git sha              : $Format:%H$
        copyright            : (C) 2022-2025 by Sylvain Th√©ry - UMR 5281 ART-Dev
        email                : sylvain.thery@cnrs.fr
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import datetime as dt
import platform
import subprocess
import tempfile
import time

from qgis.PyQt.QtGui import QGuiApplication
from qgis.PyQt.QtWidgets import QTableWidgetItem, QDialogButtonBox, QTableWidget, QCheckBox, QLabel, QPushButton, \
    QRadioButton, QComboBox, QMessageBox
from qgis.PyQt import uic, QtWidgets
import glob
from qgis.PyQt.QtCore import Qt
from qgis.utils import iface
from qgis.gui import QgsFileWidget
from qgis.core import QgsMessageLog, Qgis, QgsApplication, QgsProject

from .OsmAnd_bridge_settings_management import msgbox_setting

if platform.system() == 'Linux':
    from .extra_packages.mtpy.mtpy import get_raw_devices, common_retrieve_to_folder


elif platform.system() == 'Windows':

    try:
        import comtypes
        from .extra_packages.mtp.win_access import get_portable_devices, walk
    except:
        pass
        # trying to install comtypes
#         print("comtype package needed. Trying to install it")
#         QMessageBox.warning(None, self.tr("Python package COMTYPES not found",
#                             "Manually install this python package to download OsmAnd data directly from your phone")
#         from .extra_packages.eqip.configuration.piper import install_requirements_from_file
#         install_requirements_from_file(os.path.join(os.path.dirname(__file__), "requirements.txt"))
#         try:
#             import comtypes
#         except:
#             QMessageBox.question(None, "Unable to install COMTYPES",
#                         self.tr("Manually install this python package to download OsmAnd data directly from your phone",
#                         QMessageBox.Yes | QMessageBox.No, QMessageBox.No)





# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
try:  # Qt5
    FORM_CLASS, _ = uic.loadUiType(os.path.join(
        os.path.dirname(__file__), 'OsmAnd_bridge_import_dialog.ui'), resource_suffix='')
except:  # Qt6
    FORM_CLASS, _ = uic.loadUiType(os.path.join(
        os.path.dirname(__file__), 'OsmAnd_bridge_import_dialog.ui'))


class OsmAndBridgeImportDialog(QtWidgets.QDialog, FORM_CLASS):
    """

    """
    # annotations for completion
    buttonBox: QDialogButtonBox
    tW_tracks: QTableWidget
    QgsFW_osmand_root_path: QgsFileWidget
    QgsFW_dest_path: QgsFileWidget
    cB_favorites: QCheckBox
    cB_itinerary: QCheckBox
    cB_AVnotes: QCheckBox
    label: QLabel
    label_2: QLabel
    label_3: QLabel
    label_4: QLabel
    label_6: QLabel
    clearPB: QPushButton
    selectAllTracksPB: QPushButton
    rBdevice: QRadioButton
    rBdir: QRadioButton
    cBdeviceList: QComboBox
    qbRefresh: QPushButton
    qbGoMTP: QPushButton

    def __init__(self, parent=None):
        """
        Constructor
        :param parent: None
        :type parent: None
        """
        super(OsmAndBridgeImportDialog, self).__init__(parent)

        self.setupUi(self)

        self.plugin_name = 'OsmAnd bridge'
        self.debug = True
        self.os = platform.system()

        # Manage table view of tracks
        self.tW_tracks.setColumnCount(3)
        columns = [self.tr("Name"), self.tr("Size"), self.tr("Last Modified")]
        self.tW_tracks.setHorizontalHeaderLabels(columns)
        self.tW_tracks.setSortingEnabled(True)
        self.tW_tracks.setRowCount(0)
        try:  # pyQt5
            self.tW_tracks.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
        except:  # PyQt6
            self.tW_tracks.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.SizeAdjustPolicy.AdjustToContents)
        self.tW_tracks.selectionModel().selectionChanged.connect(self.enable_ok_button)

        # input and output path
        self.QgsFW_osmand_root_path.setStorageMode(QgsFileWidget.StorageMode.GetDirectory)
        self.QgsFW_osmand_root_path.fileChanged.connect(self.osmand_root_path_changed)
        self.QgsFW_dest_path.setStorageMode(QgsFileWidget.StorageMode.GetDirectory)

        self.QgsFW_dest_path.fileChanged.connect(self.destination_changed)
        for cBB in [self.cB_favorites, self.cB_itinerary, self.cB_AVnotes]:
            cBB.setEnabled(False)
            cBB.setChecked(False)
            cBB.stateChanged.connect(self.enable_ok_button)

        try:  # Qt5
            self.buttonBox.button(QtWidgets.QDialogButtonBox.Ok).setEnabled(False)
        except:  # Qt6
            self.buttonBox.button(QtWidgets.QDialogButtonBox.StandardButton.Ok).setEnabled(False)

        # clear tracks selection button
        try:  # Qt5
            icon = self.style().standardIcon(QtWidgets.QStyle.SP_DialogCloseButton)
        except:  # Qt6
            icon = self.style().standardIcon(QtWidgets.QStyle.StandardPixmap.SP_DialogCloseButton)
        self.clearPB.setIcon(icon)
        self.clearPB.setEnabled(False)
        self.clearPB.clicked.connect(self.clear_tracks_selection)

        # Select all tracks button
        try:  # Qt5
            icon = self.style().standardIcon(QtWidgets.QStyle.SP_DialogYesButton)
        except:  # Qt6
            icon = self.style().standardIcon(QtWidgets.QStyle.StandardPixmap.SP_DialogYesButton)
        self.selectAllTracksPB.setIcon(icon)
        self.selectAllTracksPB.setEnabled(False)
        self.selectAllTracksPB.clicked.connect(self.select_all_tracks)

        # radio buttons to switch between device and directory
        self.rBdir.toggled.connect(self.on_radio_button_toggled)
        self.rBdevice.toggled.connect(self.on_radio_button_toggled)
        self.cBdeviceList.hide()
        self.QgsFW_osmand_root_path.hide()
        self.label.hide()
        self.qbRefresh.hide()
        self.qbRefresh.clicked.connect(self.list_MTP_Devices)
        self.qbGoMTP.hide()
        self.qbGoMTP.clicked.connect(self.search_copy_osmand_file_from_device)
        self.qbGoMTP.setEnabled(False)
        try:  # Qt5
            icon = self.style().standardIcon(QtWidgets.QStyle.SP_BrowserReload)
        except:  # Qt6
            icon = self.style().standardIcon(QtWidgets.QStyle.StandardPixmap.SP_BrowserReload)
        self.qbRefresh.setIcon(icon)
        try:  # Qt5
            icon = self.style().standardIcon(QtWidgets.QStyle.SP_DialogOkButton)
        except:  # Qt6
            icon = self.style().standardIcon(QtWidgets.QStyle.StandardPixmap.SP_DialogOkButton)
        self.qbGoMTP.setIcon(icon)


        self.PARAM_FILE = f"{os.path.dirname(__file__)}/settings.json"

        if platform.system() == 'Windows':
            print("test")
            try:
                print("Trying to import comtypes")
                import comtypes.client
                self.comtypes_ok = True
                print('Successfully imported comtypes')
            except:
                print("Failed to import Comtypes")
                # TODO check a param to see if there has been a previous attempt to install Comtypes.
                try:
                    # trying to install comtypes

                    try:
                        # Qt5
                        USES_PYQT6 = False
                        answer = QMessageBox.question(None, self.tr("Python package COMTYPES not found"),
                                                 self.tr(
                                                     "Do you want to try to install Comtypes automatically?"),
                                                 QMessageBox.Yes | QMessageBox.No, QMessageBox.Yes)
                    except:
                        # Qt6
                        USES_PYQT6 = True
                        answer = QMessageBox.question(None, self.tr("Python package COMTYPES not found"),
                                                 self.tr(
                                                     "Do you want to try to install Comtypes automatically?"),
                                                      QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
                                                      QMessageBox.StandardButton.Yes)
                    if answer == (QMessageBox.StandardButton.Yes if USES_PYQT6 else QMessageBox.Yes):

                        from .extra_packages.eqip.configuration.piper import install_requirements_from_file
                        install_requirements_from_file(os.path.join(os.path.dirname(__file__), "requirements.txt"))
                    title = self.tr("Comtypes package successfully installed")
                    message = self.tr(
                        "QGIS has to be restarted. Do you want to do it now (and be asked to save your project if needed?")
                    try:
                    # Qt5
                        answer = QMessageBox.question(None, title, message,
                                     QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
                    except:
                        # Qt6
                        answer = QMessageBox.question(None, title, message,
                                                      QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
                                                      QMessageBox.StandardButton.Yes)

                    if answer == (QMessageBox.StandardButton.Yes if USES_PYQT6 else QMessageBox.Yes):
                        if QgsProject.instance().isDirty():
                            iface.actionSaveProject().trigger()
                        iface.actionExit().trigger()
                        subprocess.Popen(QgsApplication.applicationFilePath())

                except:
                    QMessageBox.warning(None, self.tr("Python package COMTYPES installation failed"),
                                                 self.tr(
                                                     "Manually install this python package to download OsmAnd data directly from your device"))
        # Macintosh stuff
        self.APP_NAME = "MacDroid"
        self.APP_PATH = f"/Applications/{APP_NAME}.app"
    def list_MTP_Devices(self):
        """
        List TMP devices connected to system to feed interface listbox
        :return:
        """

        # Clear stuff on UI
        self.clear_UI_items()

        self.qbGoMTP.setEnabled(False)
        if self.os == 'Linux':
            print('linux')
            self.kill_pid()
            try:
                devices = get_raw_devices()
            except:
                QMessageBox.warning(self, self.tr('No device found!'),
                                    self.tr("Check that your device is properly connected and unlocked."))
                return

            try:
                for device in devices:
                    self.kill_pid()
                    device_open = device.open()
                    device_model_name = str(device_open.get_model_name())
                    self.cBdeviceList.addItem(f'{device_model_name} - {str(device_open)[9:-2]}')
                    device_open.close()
            except:
                print("Can't connect to device")
                QMessageBox.warning(self, self.tr("Can't connect to device"),
                                    self.tr("Check that it is properly connected and unlocked.\n Try unplugging "
                                            "and replugging it."))
                return
            if self.cBdeviceList.count() > 0:
                self.qbGoMTP.setEnabled(True)


        elif self.os == 'Windows':

            self.kill_pid()
            try:
                devices = get_portable_devices()
            except:
                QMessageBox.warning(self, self.tr('No device found!'),
                                    self.tr("Check that your device is properly connected and unlocked."))
                return
            try:
                for device in devices:
                    self.cBdeviceList.addItem(f"{device.get_description()[0]} - {device.get_description()[1]}")
            except:
                print("Can't connect to device")
                QMessageBox.warning(self, self.tr("Can't connect to device"),
                                    self.tr("Check that it is properly connected and unlocked.\n Try unplugging "
                                            "and replugging it."))
                return
            if self.cBdeviceList.count() > 0:
                self.qbGoMTP.setEnabled(True)
            else:
                QMessageBox.warning(self, self.tr('No device found!'),
                                    self.tr("Check that your device is properly connected and unlocked."))
                QGuiApplication.restoreOverrideCursor()

        elif self.os == 'Darwin':
            # print("Not available 4 macOS")
            # QMessageBox.warning(self, self.tr("Not available 4 macOS"),
            #                     self.tr("Not available 4 macOS"))
            if self.is_macdroid_installed():
                print("‚úÖ MacDroid est install√©.")

                if self.is_macdroid_running():
                    print("üöÄ MacDroid est d√©j√† lanc√©.")
                else:
                    print("üîÑ MacDroid n‚Äôest pas lanc√©. Lancement en cours...")
                    self.launch_macdroid()
            else:
                self.rBdir.setChecked(True)
                self.rBdevice.setEnabled(False)
                self.on_radio_button_toggled()
                setting_name = "hide_macrdoid_message"
                title = self.tr("Warning")
                message = self.tr("This plugin needs Macdroid (even Free version) to access MTP Device. Please consider installing it."
                                  "See <a href='https://www.macdroid.app/fr/downloads/'>https://www.macdroid.app/fr/downloads</a>")
                msgbox_setting(self, message, setting_name, title)

        else:
            pass


    def is_macdroid_installed(self):
        return os.path.exists(self.APP_PATH)

    def is_macdroid_running(self):
        try:
            result = subprocess.run(
                ["pgrep", "-fx", f"/Applications/{self.APP_NAME}.app/Contents/MacOS/{self.APP_NAME}"],
                capture_output=True,
                text=True
            )
            return result.returncode == 0
        except Exception as e:
            print("Erreur lors de la v√©rification du processus :", e)
            return False

    def launch_macdroid(self):
        try:
            subprocess.run(["open", "-a", self.APP_NAME], check=True)
            print("MacDroid a √©t√© lanc√©.")
        except subprocess.CalledProcessError:
            print("Impossible de lancer MacDroid.")


    def search_copy_osmand_file_from_device(self):
        setting_name = "hide_duration_message"
        title = self.tr("Warning")
        mtpy_msg = ''
        if self.os != 'Windows':
            mtpy_msg = self.tr(", especially under GNU/Linux and macOS:(")

        message = self.tr(f"Be patient! \nThis operation can take several minutes{mtpy_msg}.\nIn rare cases, "
                          f"it can cause Qgis to crash.")
        msgbox_setting(self, message, setting_name, title)

        # https://gis.stackexchange.com/questions/42542/changing-cursor-shape-in-pyqgis
        try:
            # PyQt6
            QGuiApplication.setOverrideCursor(Qt.CursorShape.WaitCursor)
        except AttributeError:
            # PyQt5
            QGuiApplication.setOverrideCursor(Qt.WaitCursor)


        # create temp folder for the downloaded data to be stored
        tmp_dir_name = tempfile.TemporaryDirectory().name
        print(f'Copying data to tmp folder: {tmp_dir_name}')
        items_list = ['/avnotes/', '/tracks/rec/', '/favorites/', '/itinerary.gpx']
        os.makedirs(tmp_dir_name + items_list[0])
        os.makedirs(tmp_dir_name + items_list[1])
        os.makedirs(tmp_dir_name + items_list[2])

        potential_paths = ['/Android/data/net.osmand/files', '/Android/data/net.osmand.plus/files',
                           '/Android/media/net.osmand/files', '/Android/media/net.osmand.plus/files',
                           '/Android/obb/net.osmand/files', '/Android/obb/net.osmand.plus/files',
                           ]

        if self.os == 'Linux':
            self.kill_pid()
            try:
                devices = get_raw_devices()
            except:
                QMessageBox.warning(self, self.tr('No device found!'),
                                    self.tr("Check that your device is properly connected and unlocked."))
                QGuiApplication.restoreOverrideCursor()
                return

            try:
                for device in devices:
                    self.kill_pid()
                    device_open = device.open()
                    device_model_name = str(device_open.get_model_name())

                    if self.cBdeviceList.currentText() == (f'{device_model_name} - {str(device_open)[9:-2]}'):
                        print(f'Looking for osmand files on {device_model_name} - {str(device_open)[9:-2]}')


                        path_found = False
                        begin = time.strftime("%H:%M:%S")
                        # print(f"starting : {begin}")
                        begin = time.time()
                        first = True
                        for path in potential_paths:
                            # print(f'Searching in {path}')
                            if first:
                                # print(f"starting : {time.strftime('%H:%M:%S')}")
                                first = False
                                next = time.time()
                                duration = next - begin
                                # print(f"Duration: {duration:.2f} secondes")
                            if device_open.get_descendant_by_path(path) is not None:
                                path_found = True
                                next = time.time()
                                duration = next - begin
                                # print(f"Duration: {duration:.2f} secondes")
                                break
                            next = time.time()
                            duration = next - begin
                            print(f"Duration: {duration:.2f} secondes")

                        if not path_found:
                            QGuiApplication.restoreOverrideCursor()
                            msg = QMessageBox()
                            msg.setWindowTitle(self.tr("No files found"))
                            msg.setText(
                                self.tr(f"OsmAnd files could not be found on {device_model_name}. Try copying the "
                                        "files to your hard disk and importing them into QGIS from the "
                                        "local directory."))
                            try:
                                # Qt6
                                msg.setIcon(QMessageBox.Icon.Warning)
                                msg.setStandardButtons(QMessageBox.StandardButton.Ok)
                            except:
                                # Qt5
                                msg.setIcon(QMessageBox.Information)
                                msg.setStandardButtons(QMessageBox.Ok)
                            msg.exec()
                            return

                        # copy data to tmp folder
                        for item in items_list:
                            print(path + item)
                            try:
                                # copy item to tmp dir
                                self.kill_pid()
                                item_content = device_open.get_descendant_by_path(path + item)
                                if item_content is not None:
                                    self.kill_pid()
                                    if item == '/itinerary.gpx':  # since it's a file not a dir
                                        item_content.retrieve_to_file(tmp_dir_name)
                                    else:
                                        common_retrieve_to_folder(item_content, tmp_dir_name + item)
                                #     print(f'Copying {item}')
                                # else:
                                #     print(f'No {item}')
                            except:
                                # print(f'Issue copying {item}')
                                pass


                    device_open.close()
            except:
                print("Can't connect to device")
                QMessageBox.warning(self, self.tr("Can't connect to device"),
                                    self.tr("Check that it is properly connected and unlocked.\n Try unplugging "
                                            "and replugging it."))
                QGuiApplication.restoreOverrideCursor()
                return
        elif self.os == 'Windows':
            try:
                devices = get_portable_devices()
            except:
                QMessageBox.warning(self, self.tr('No device found!'),
                                    self.tr("Check that your device is properly connected and unlocked."))
                QGuiApplication.restoreOverrideCursor()
                return
            if len(devices) == 0:
                QMessageBox.warning(self, self.tr('No device found!'),
                                    self.tr("Check that your device is properly connected and unlocked."))
                QGuiApplication.restoreOverrideCursor()

            try:
                for device in devices:
                    device_model_name, device_desc = device.get_description()
                    selected_device = device
                    cont = device.get_content()
                    found = False
                    if self.cBdeviceList.currentText() == (f'{device_model_name} - {device_desc}'):
                        print(f'Looking for osmand files on {device_model_name} - {device_desc}')
                        root_path = None
                        for root, dirs, files in walk(device, device_model_name):
                            if (len(dirs)) > 0:
                                root_path = dirs[0].name
                                break

                        if root_path is not None:
                            for path in potential_paths:
                                for root, dirs, files in walk(device, device_desc+'\\'+root_path+path):
                                    if (len(dirs)) > 0:
                                        found = True
                                        break
                                if found:
                                    break

                        if not found:
                            QGuiApplication.restoreOverrideCursor()
                            msg = QMessageBox()
                            msg.setWindowTitle(self.tr("No files found"))
                            msg.setText(
                                self.tr(f"OsmAnd files could not be found on {device_model_name}. Try copying the "
                                        "files to your hard disk and importing them into QGIS from the "
                                        "local directory."))
                            try:
                                # Qt6
                                msg.setIcon(QMessageBox.Icon.Warning)
                                msg.setStandardButtons(QMessageBox.StandardButton.Ok)
                            except:
                                # Qt5
                                msg.setIcon(QMessageBox.Warning)
                                msg.setStandardButtons(QMessageBox.Ok)
                            msg.exec()
                            print("No path found")
                            return


                cont = selected_device.get_content()
                for item in items_list:
                    print(item)
                    if item == '/itinerary.gpx':

                        file_name = f"{root_path}{path}/itinerary.gpx".replace('/', os.sep)
                        content = cont[0].get_path(file_name)
                        content.download_file(f"{tmp_dir_name}\\itinerary.gpx")
                    else:
                        item = item.replace('/', os.sep)
                        item_path = f"{device_model_name}/{root_path}{path}{item[:-1]}".replace('/', os.sep)
                        for root, dirs, files in walk(device, item_path):
                            for file in files:
                                file.download_file(f"{tmp_dir_name}{item}{file.name}")

            except:
                QGuiApplication.restoreOverrideCursor()
                print("Can't connect to device")
                QMessageBox.warning(self, self.tr("Can't connect to device"),
                                    self.tr("Check that it is properly connected and unlocked.\n Try unplugging "
                                            "and replugging it."))
                return

        self.QgsFW_osmand_root_path.setFilePath(tmp_dir_name)
        QGuiApplication.restoreOverrideCursor()

    def on_radio_button_toggled(self):
        self.label.show()
        self.clear_UI_items()
        if self.rBdir.isChecked():
            self.QgsFW_osmand_root_path.setFilePath('')
            self.QgsFW_osmand_root_path.show()
            self.cBdeviceList.hide()
            self.qbRefresh.hide()
            self.qbGoMTP.hide()
            self.label.setText(self.tr('<html><head/><body><p><span style=" font-weight:600;">Select the OSMand'
                                       ' \'file\' directory on you computer:</span></p></body></html>'))

        elif self.rBdevice.isChecked():
            self.QgsFW_osmand_root_path.hide()
            self.QgsFW_osmand_root_path.setFilePath('')
            self.cBdeviceList.show()
            self.qbRefresh.show()
            self.qbGoMTP.show()
            self.label.setText(self.tr(
                "<html><head/><body><p><span style=\" font-weight:600;\">"
                "Select your device and press the left button to search for OsmAnd files:"
                "</span></p></body></html>"))
            self.list_MTP_Devices()

    def clear_UI_items(self):
        """
        Clear UI items.
        """
        self.cBdeviceList.clear()
        self.tW_tracks.clearContents()
        self.tW_tracks.setRowCount(0)
        self.QgsFW_osmand_root_path.setFilePath('')
        for item in [self.cB_itinerary, self.cB_favorites, self.cB_AVnotes]:
            item.setEnabled(False)
            item.setChecked(False)

    def kill_pid(self):
        """
        Find and kill process by its PID.
        see https://bugs.kde.org/show_bug.cgi?id=412257
        Since kiod 5 doesn't release usb device when it is not in use, we kill kio* processes.
        Seems to be the same under gnome so that's why we kill all gfvs processes.
        :return: nothing
        """
        try:
            for deskktop in ['kio', 'gvfs']:
                pid = os.popen(f"pgrep -f '{deskktop}'").read()
                os.system("kill -9 " + pid)

        except:
            pass

    def clear_tracks_selection(self) -> None:
        """
        Unselect all tracks
        :return:
        """

        self.tW_tracks.clearSelection()
        self.enable_ok_button()

    def select_all_tracks(self):
        # S√©lectionner toutes les lignes
        self.tW_tracks.selectAll()
        self.enable_ok_button()

    def destination_changed(self):
        """
        Called when destination text area content change
        :return: None
        :rtype: None
        """

        if not os.path.exists(os.path.dirname(self.QgsFW_dest_path.filePath())):
            QgsMessageLog.logMessage(self.tr('not valid output file path.'), self.plugin_name, level=Qgis.Critical)
        self.enable_ok_button()

    def osmand_root_path_changed(self) -> None:
        """
        Called when source text area content changes
        :return: None
        :rtype: None
        """
        print('osmand_root_path_changed(self) call')
        self.tW_tracks.clearContents()
        self.tW_tracks.setRowCount(0)
        self.clearPB.setEnabled(False)
        self.selectAllTracksPB.setEnabled(False)

        if not os.path.isdir(self.QgsFW_osmand_root_path.filePath()):
            QgsMessageLog.logMessage(self.tr('*Not a valid directory.'), self.plugin_name, level=Qgis.Critical)
            # self.init_widget()
        else:
            # tracks table
            try:
                if not os.path.isdir(f'{self.QgsFW_osmand_root_path.filePath()}/tracks/rec/'):
                    QgsMessageLog.logMessage(self.tr('no valid OsmAnd tracks path.'), self.plugin_name,
                                             level=Qgis.Critical)

                else:
                    pattern = f'{self.QgsFW_osmand_root_path.filePath()}/tracks/rec/*.gpx'
                    if len(glob.glob(pattern)) >= 0:
                        self.get_gpx_file_information(pattern)
                        self.tW_tracks.setEnabled(True)
                        self.tW_tracks.resizeColumnsToContents()
                        self.clearPB.setEnabled(True)
                        self.selectAllTracksPB.setEnabled(True)
                        self.select_all_tracks()

            except:
                QgsMessageLog.logMessage(self.tr('no gpx file to import.'), self.plugin_name, level=Qgis.Critical)

            # checkbox favorites
            try:
                with open(f'{self.QgsFW_osmand_root_path.filePath()}/favorites/favorites.gpx'):
                    QgsMessageLog.logMessage(self.tr('found favorites.gpx.'), self.plugin_name, level=Qgis.Info)
                    self.cB_favorites.setEnabled(True)
                    self.cB_favorites.setChecked(True)

            except IOError:
                QgsMessageLog.logMessage(self.tr('No favorites found.'), self.plugin_name, level=Qgis.Warning)
                self.cB_favorites.setEnabled(False)
                self.cB_favorites.setChecked(False)

            # checkbox itinerary
            try:
                with open(f'{self.QgsFW_osmand_root_path.filePath()}/itinerary.gpx'):
                    QgsMessageLog.logMessage(self.tr('found ./itinerary.gpx.'), self.plugin_name, level=Qgis.Info)
                    self.cB_itinerary.setEnabled(True)
                    self.cB_itinerary.setChecked(True)

            except IOError:
                QgsMessageLog.logMessage(self.tr('./itinerary.gpx not found.'), self.plugin_name, level=Qgis.Warning)
                self.cB_itinerary.setEnabled(False)
                self.cB_itinerary.setChecked(False)

            # checkbox AVnotes
            try:
                if not os.path.isdir(f'{self.QgsFW_osmand_root_path.filePath()}/avnotes/'):
                    QgsMessageLog.logMessage(self.tr('no valid OsmAnd avnotes path.'), self.plugin_name,
                                             level=Qgis.Critical)
                    self.cB_AVnotes.setEnabled(False)
                    self.cB_AVnotes.setChecked(False)
                else:
                    if len(glob.glob(f'{self.QgsFW_osmand_root_path.filePath()}/avnotes/*.3gp)')) + \
                            len(glob.glob(f'{self.QgsFW_osmand_root_path.filePath()}/avnotes/*.jpg')) + \
                            len(glob.glob(f'{self.QgsFW_osmand_root_path.filePath()}/avnotes/*.mp4')) > 0:
                        self.cB_AVnotes.setEnabled(True)
                        self.cB_AVnotes.setChecked(True)

            except:
                QgsMessageLog.logMessage(self.tr('no avnote file to import.'), self.plugin_name, level=Qgis.Critical)

        self.enable_ok_button()

    def get_gpx_file_information(self, pattern: str) -> None:
        """
        List files according to pattern and send info the function that feed dialog table
        :param pattern: a file pattern whit directory (e.g. '/home/sylvain/test/*.gpx)
        :type pattern: string
        :return: None
        :rtype: None
        """
        # listFiles = os.listdir(path)
        for f in glob.glob(pattern):
            p = os.path.join(pattern, f)
            st = os.stat(p)
            # to do convert list into individual items
            self.add_gpx_file_table_row([os.path.basename(f), self.human_readable_filesize(os.path.getsize(p)),
                                         str(dt.datetime.fromtimestamp(st.st_mtime))])

    def add_gpx_file_table_row(self, row_data) -> None:
        """
        Add files details to the dialog's table widget
        :param row_data: list of gpx file details
        :type row_data: list of strings
        :return: None
        :rtype: None
        """
        row = self.tW_tracks.rowCount()
        self.tW_tracks.setRowCount(row + 1)
        col = 0
        for item in row_data:
            cell = QTableWidgetItem(str(item))
            self.tW_tracks.setItem(row, col, cell)
            col += 1

    def human_readable_filesize(self, bytes: int, units=[' bytes', ' KB', ' MB', ' GB', ' TB', ' PB', ' EB']) -> str:
        """
        Return a human-readable string representation of bytes based on a recursive call of itself
        Taken from https://stackoverflow.com/questions/1094841/get-human-readable-version-of-file-size/43750422
        :param bytes: size of a file in bytes
        :type bytes: int
        :param units: human-readable file size units
        :type units: list of string
        :return: return a human-readable string representation of bytes
        :rtype: str
        """

        return str(bytes) + units[0] if bytes < 1024 else self.human_readable_filesize(bytes >> 10, units[1:])

    def enable_ok_button(self):
        """
        Manage OK button. Make it only enable when params are OK.
        :return: None
        :rtype: None
        """
        flag = False
        try:

            if os.path.isdir(os.path.dirname(self.QgsFW_osmand_root_path.filePath())):
                if os.path.isdir(self.QgsFW_dest_path.filePath()):
                    if self.cB_AVnotes.isChecked() or self.cB_favorites.isChecked() or self.cB_itinerary.isChecked() \
                            or len(set(index.row() for index in self.tW_tracks.selectedIndexes())) > 0:
                        flag = True

        except:
            pass

        try:  # Qt5
            self.buttonBox.button(QtWidgets.QDialogButtonBox.Ok).setEnabled(flag)
        except:  # Qt6
            self.buttonBox.button(QtWidgets.QDialogButtonBox.StandardButton.Ok).setEnabled(flag)
