# -*- coding: utf-8 -*-
"""
/***************************************************************************
 OsmAnd bridge
                                 A QGIS plugin
 Import tracks, favorites, itinerary and AV notes from OsmAnd
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2022-04-10
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Sylvain Th√©ry - UMR 5281 ART-Dev
        email                : sylvain.thery@cnrs.fr
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import datetime as dt
import platform
import tempfile
from PyQt5.QtGui import QGuiApplication
from PyQt5.QtWidgets import QTableWidgetItem, QDialogButtonBox, QTableWidget, QCheckBox, QLabel, QPushButton, \
    QRadioButton, QComboBox, QMessageBox
from qgis.PyQt import uic, QtWidgets
import glob
from PyQt5.QtCore import Qt
from qgis.utils import OverrideCursor
from qgis.gui import QgsFileWidget
from qgis.core import QgsMessageLog, Qgis

from .OsmAnd_bridge_settings_management import msgbox_setting

if platform.system() == 'Linux':
    from .mtp4linux_mtpy.mtpy import get_raw_devices, common_retrieve_to_folder

elif platform.system() == 'Windows':
    import mtp4win_win_mtp as win_mtp

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'OsmAnd_bridge_import_dialog.ui'), resource_suffix='')


class OsmAndBridgeImportDialog(QtWidgets.QDialog, FORM_CLASS):
    """

    """
    # annotations for completion
    buttonBox: QDialogButtonBox
    tW_tracks: QTableWidget
    QgsFW_osmand_root_path: QgsFileWidget
    QgsFW_dest_path: QgsFileWidget
    cB_favorites: QCheckBox
    cB_itinerary: QCheckBox
    cB_AVnotes: QCheckBox
    label: QLabel
    label_2: QLabel
    label_3: QLabel
    label_4: QLabel
    label_6: QLabel
    clearPB: QPushButton
    rBdevice: QRadioButton
    rBdir: QRadioButton
    cBdeviceList: QComboBox
    qbRefresh: QPushButton
    qbGoMTP: QPushButton

    def __init__(self, parent=None):
        """
        Constructor
        :param parent: None
        :type parent: None
        """
        super(OsmAndBridgeImportDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        self.plugin_name = 'OsmAnd bridge'
        self.debug = True
        self.os = platform.system()

        # Manage table view of tracks
        self.tW_tracks.setColumnCount(3)
        columns = [self.tr("Name"), self.tr("Size"), self.tr("Last Modified")]
        self.tW_tracks.setHorizontalHeaderLabels(columns)
        self.tW_tracks.setSortingEnabled(True)
        self.tW_tracks.setRowCount(0)
        self.tW_tracks.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
        self.tW_tracks.selectionModel().selectionChanged.connect(self.enable_ok_button)
        #
        self.QgsFW_osmand_root_path.fileChanged.connect(self.osmand_root_path_changed)
        self.QgsFW_dest_path.fileChanged.connect(self.destination_changed)
        for cBB in [self.cB_favorites, self.cB_itinerary, self.cB_AVnotes]:
            cBB.setEnabled(False)
            cBB.setChecked(False)
            cBB.stateChanged.connect(self.enable_ok_button)
        self.buttonBox.button(QtWidgets.QDialogButtonBox.Ok).setEnabled(False)
        self.clearPB.clicked.connect(self.clear_selection)

        # radio buttons to switch beetween device and directory
        self.rBdir.toggled.connect(self.on_radio_button_toggled)
        self.rBdevice.toggled.connect(self.on_radio_button_toggled)
        self.cBdeviceList.hide()
        self.QgsFW_osmand_root_path.hide()
        self.label.hide()
        self.qbRefresh.hide()
        self.qbRefresh.clicked.connect(self.list_MTP_Device)
        self.qbGoMTP.hide()
        self.qbGoMTP.clicked.connect(self.search_copy_osmand_file_from_device)
        self.qbGoMTP.setEnabled(False)

        # icon = self.style().standardIcon(QtWidgets.QStyle.SP_BrowserReload)
        # self.qbRefresh.setIcon(icon)
        self.PARAM_FILE = f"{os.path.dirname(__file__)}/settings.json"

    def search_copy_osmand_file_from_device(self):
        setting_name = "hide_duration_message"
        title = "Warning"
        message = "Be patient! \nThis operation can take several minutes\nIn rare cases, it can cause Qgis to crash."
        msgbox_setting(self, message, setting_name, title)

        # https://gis.stackexchange.com/questions/42542/changing-cursor-shape-in-pyqgis
        QGuiApplication.setOverrideCursor(Qt.WaitCursor)
        print('search_copy_osmand_file_from_device(self) call')  # DEBUG
        if self.os == 'Linux':
            print('Linux')
            self.kill_pid()
            try:
                devices = get_raw_devices()
            except:
                if self.first:
                    QMessageBox.warning(self, self.tr('No device found!'),
                                        self.tr("Check that your device is properly connected and unlocked."))
                QGuiApplication.restoreOverrideCursor()
                return

            # try:
            for device in devices:
                self.kill_pid()
                device_open = device.open()
                device_model_name = str(device_open.get_model_name())

                if self.cBdeviceList.currentText() == (f'{device_model_name} - {str(device_open)[9:-2]}'):
                    print(f'Looking for osmand files on {device_model_name} - {str(device_open)[9:-2]}')

                    potential_paths = ['/Android/data/net.osmand/files', '/Android/data/net.osmand.plus/files',
                                       '/Android/obb/net.osmand/files', '/Android/obb/net.osmand.plus/files']
                    path_found = False
                    for path in potential_paths:
                        print(f'Searching in {path}')
                        if device_open.get_descendant_by_path(path) is not None:
                            path_found = True
                            break
                    if not path_found:
                        return

                    # copy data to tmp folder

                    tmp_dir_name = tempfile.TemporaryDirectory().name
                    print(f'Copying data to tmp folder: {tmp_dir_name}')
                    items_list = ['/avnotes/', '/tracks/rec/', '/favorites/', '/itinerary.gpx']
                    os.makedirs(tmp_dir_name + items_list[0])
                    os.makedirs(tmp_dir_name + items_list[1])
                    os.makedirs(tmp_dir_name + items_list[2])
                    for item in items_list:
                        print(path + item)
                        # try:
                        #     # copy item to tmp dir
                        self.kill_pid()
                        item_content = device_open.get_descendant_by_path(path + item)
                        if item_content is not None:
                            self.kill_pid()
                            if item == '/itinerary.gpx':  # since it's a file not a dir
                                item_content.retrieve_to_file(tmp_dir_name)
                            else:
                                common_retrieve_to_folder(item_content, tmp_dir_name + item)
                            print(f'Copying {item}')
                        else:
                            print(f'No {item}')
                        # except:
                        #     print(f'Issue copying {item}')
                        #     pass
                    print(tmp_dir_name)
                    self.QgsFW_osmand_root_path.setFilePath(tmp_dir_name)

                device_open.close()
            # except:
            #     print('Can\'t connect to device')
            #     QMessageBox.warning(self, self.tr('Can\'t connect to device'),
            #                         self.tr("Check that it is properly connected and unlocked.\n Try unplugging "
            #                                 "and replugging it."))
            #     QGuiApplication.restoreOverrideCursor()
            #     return
        QGuiApplication.restoreOverrideCursor()

    def on_radio_button_toggled(self):
        self.label.show()
        if self.rBdir.isChecked():
            self.QgsFW_osmand_root_path.setFilePath('')
            self.QgsFW_osmand_root_path.show()
            self.cBdeviceList.hide()
            self.qbRefresh.hide()
            self.qbGoMTP.hide()
            self.label.setText(self.tr('<html><head/><body><p><span style=" font-weight:600;">Select the \'file\' '
                                       'directory on you computer:</span></p></body></html>'))
            print('rBdir')
        elif self.rBdevice.isChecked():
            self.QgsFW_osmand_root_path.hide()
            self.QgsFW_osmand_root_path.setFilePath('')
            self.cBdeviceList.show()
            self.qbRefresh.show()
            self.qbGoMTP.show()
            self.label.setText(self.tr('<html><head/><body><p><span style=" font-weight:600;">Select your device:'
                                       '</span></p></body></html>'))
            print('rBdevice')

            self.list_MTP_Device()

    def list_MTP_Device(self):
        try:
            print("list_MTP_Device(self) call")
            self.cBdeviceList.clear()

            if self.os == 'Linux':

                self.kill_pid()
                try:
                    devices = get_raw_devices()
                except:
                    QMessageBox.warning(self, self.tr('No device found!'),
                                        self.tr("Check that your device is properly connected and unlocked."))
                    return

                try:
                    for device in devices:
                        self.kill_pid()
                        device_open = device.open()
                        device_model_name = str(device_open.get_model_name())
                        self.cBdeviceList.addItem(f'{device_model_name} - {str(device_open)[9:-2]}')
                        device_open.close()
                except:
                    print('Can\'t connect to device')
                    QMessageBox.warning(self, self.tr('Can\'t connect to device'),
                                        self.tr("Check that it is properly connected and unlocked.\n Try unplugging "
                                                "and replugging it."))
                    return
                if self.cBdeviceList.count() > 0:
                    self.qbGoMTP.setEnabled(True)


            elif self.os == 'Windows':
                pass
            elif self.os == 'Darwin':
                pass
            else:
                pass
        except:
            print("plantage")

    def kill_pid(self):
        try:
            # see https://bugs.kde.org/show_bug.cgi?id=412257
            # find and kill process by its PID
            pid = os.popen("pgrep -f 'kiod'").read()
            print(pid)
            os.system("kill -9 " + pid)
            os.system('killall kiod5')
            print('kill')
        except:
            print('no kill pid')
            pass

    def clear_selection(self):
        self.tW_tracks.clearSelection()
        self.enable_ok_button()

    def destination_changed(self):
        """
        Called when destination text area content change
        :return: None
        :rtype: None
        """

        if not os.path.exists(os.path.dirname(self.QgsFW_dest_path.filePath())):
            QgsMessageLog.logMessage(self.tr('not valid output file path.'), self.plugin_name, level=Qgis.Critical)
        self.enable_ok_button()

    def osmand_root_path_changed(self) -> None:
        """
        Called when source text area content change
        :return: None
        :rtype: None
        """
        print('osmand_root_path_changed(self) call')
        self.tW_tracks.clearContents()
        self.tW_tracks.setRowCount(0)
        if not os.path.isdir(self.QgsFW_osmand_root_path.filePath()):
            QgsMessageLog.logMessage(self.tr('*Not a valid directory.'), self.plugin_name, level=Qgis.Critical)
            # self.init_widget()
        else:
            # tracks table
            try:
                if not os.path.isdir(f'{self.QgsFW_osmand_root_path.filePath()}/tracks/rec/'):
                    QgsMessageLog.logMessage(self.tr('no valid OsmAnd tracks path.'), self.plugin_name,
                                             level=Qgis.Critical)

                else:
                    pattern = f'{self.QgsFW_osmand_root_path.filePath()}/tracks/rec/*.gpx'
                    if len(glob.glob(pattern)) >= 0:
                        self.get_gpx_file_information(pattern)
                        self.tW_tracks.setEnabled(True)
                        self.tW_tracks.resizeColumnsToContents()

            except:
                QgsMessageLog.logMessage(self.tr('no gpx file to import.'), self.plugin_name, level=Qgis.Critical)

            # checkbox favorites
            try:
                with open(f'{self.QgsFW_osmand_root_path.filePath()}/favorites/favorites.gpx'):
                    QgsMessageLog.logMessage(self.tr('found favorites.gpx.'), self.plugin_name, level=Qgis.Info)
                    self.cB_favorites.setEnabled(True)
                    self.cB_favorites.setChecked(True)

            except IOError:
                QgsMessageLog.logMessage(self.tr('No favorites found.'), self.plugin_name, level=Qgis.Warning)
                self.cB_favorites.setEnabled(False)
                self.cB_favorites.setChecked(False)

            # checkbox itinerary
            try:
                with open(f'{self.QgsFW_osmand_root_path.filePath()}/itinerary.gpx'):
                    QgsMessageLog.logMessage(self.tr('found ./itinerary.gpx.'), self.plugin_name, level=Qgis.Info)
                    self.cB_itinerary.setEnabled(True)
                    self.cB_itinerary.setChecked(True)

            except IOError:
                QgsMessageLog.logMessage(self.tr('./itinerary.gpx not found.'), self.plugin_name, level=Qgis.Warning)
                self.cB_itinerary.setEnabled(False)
                self.cB_itinerary.setChecked(False)

            # checkbox AVnotes
            try:
                if not os.path.isdir(f'{self.QgsFW_osmand_root_path.filePath()}/avnotes/'):
                    QgsMessageLog.logMessage(self.tr('no valid OsmAnd avnotes path.'), self.plugin_name,
                                             level=Qgis.Critical)
                    self.cB_AVnotes.setEnabled(False)
                    self.cB_AVnotes.setChecked(False)
                else:
                    if len(glob.glob(f'{self.QgsFW_osmand_root_path.filePath()}/avnotes/*.3gp)')) + \
                            len(glob.glob(f'{self.QgsFW_osmand_root_path.filePath()}/avnotes/*.jpg')) + \
                            len(glob.glob(f'{self.QgsFW_osmand_root_path.filePath()}/avnotes/*.mp4')) > 0:
                        self.cB_AVnotes.setEnabled(True)
                        self.cB_AVnotes.setChecked(True)

            except:
                QgsMessageLog.logMessage(self.tr('no avnote file to import.'), self.plugin_name, level=Qgis.Critical)

        self.enable_ok_button()

    def get_gpx_file_information(self, pattern: str) -> None:
        """
        List files according to pattern and send info the function that feed dialog table
        :param pattern: a file pattern whit directory (eg. '/home/sylvain/test/*.gpx)
        :type pattern: string
        :return: None
        :rtype: None
        """
        # listFiles = os.listdir(path)
        for f in glob.glob(pattern):
            p = os.path.join(pattern, f)
            st = os.stat(p)
            # to do convert list into individual items
            self.add_gpx_file_table_row([os.path.basename(f), self.human_readable_filesize(os.path.getsize(p)),
                                         str(dt.datetime.fromtimestamp(st.st_mtime))])

    def add_gpx_file_table_row(self, row_data) -> None:
        """
        Add files details to the dialog's table widget
        :param row_data: list of gpx file details
        :type row_data: list of strings
        :return: None
        :rtype: None
        """
        row = self.tW_tracks.rowCount()
        self.tW_tracks.setRowCount(row + 1)
        col = 0
        for item in row_data:
            cell = QTableWidgetItem(str(item))
            self.tW_tracks.setItem(row, col, cell)
            col += 1

    def human_readable_filesize(self, bytes: int, units=[' bytes', ' KB', ' MB', ' GB', ' TB', ' PB', ' EB']) -> str:
        """
        Return a human readable string representation of bytes based on a recursive call of itself
        Taken from https://stackoverflow.com/questions/1094841/get-human-readable-version-of-file-size/43750422
        :param bytes: size of a file in bytes
        :type bytes: int
        :param units: human readable file size units
        :type units: list of string
        :return: return a human readable string representation of bytes
        :rtype: str
        """

        return str(bytes) + units[0] if bytes < 1024 else self.human_readable_filesize(bytes >> 10, units[1:])

    def enable_ok_button(self):
        """
        Manage OK button. Make it only enable when params are OK.
        :return: None
        :rtype: None
        """
        flag = False
        try:

            if os.path.isdir(os.path.dirname(self.QgsFW_osmand_root_path.filePath())):
                if os.path.isdir(self.QgsFW_dest_path.filePath()):
                    if self.cB_AVnotes.isChecked() or self.cB_favorites.isChecked() or self.cB_itinerary.isChecked() \
                            or len(set(index.row() for index in self.tW_tracks.selectedIndexes())) > 0:
                        flag = True

        except:
            pass
        self.buttonBox.button(QtWidgets.QDialogButtonBox.Ok).setEnabled(flag)
